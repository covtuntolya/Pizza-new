
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int  @id @default(autoincrement())

  fullName  String
  email String @unique
  password  String
  verified DateTime
  role UserRole @default(USER)

  provider String?
  providerId String?

  cart Cart?
  orders Order[]
  verificationCode VerificationCode?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id  Int @id @default(autoincrement())

  name String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name  String
  imageUrl  String

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingridients Ingridient[]
  items ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  price Int
  size Int?
  pizzaType Int?

  cartItems CartItem[]

  product Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingridient {
  id  Int @id @default(autoincrement())

  name String
  imageUrl String
  price Int

  products Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  totalAmount Int @default(0)
  token String

  items CartItem[]

  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingridient[]

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id  Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  token String
  totalAmount Int
  status OrderStatus
  paymentId String
  items Json

  fullName String
  address String
  email String
  comment String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id  @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId  Int @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
